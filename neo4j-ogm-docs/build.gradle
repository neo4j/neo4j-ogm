import org.asciidoctor.Asciidoctor
import org.asciidoctor.OptionsBuilder
import org.asciidoctor.SafeMode
import org.neo4j.doc.build.xslt.XsltTask
import org.neo4j.doc.build.docbook.DocBookPlugin

//
// Object-Graph Mapping (OGM) Manual
//

buildscript {
    ext {
        asciidoctorjVersion = '1.5.4.1'
        asciidoctorjPdfVersion = '1.5.0-alpha.11'
        asciidoctorGroovyDslVersion = '1.0.0.Alpha2'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion"
        classpath "org.asciidoctor:asciidoctorj-groovy-dsl:$asciidoctorGroovyDslVersion"
        classpath 'net.sf.docbook:docbook-xsl:1.79.1:ns-resources@zip'
        classpath fileTree(dir: "${rootProject.projectDir}/lib", include: '*.jar')
        classpath files("src/main/resources/docbook/catalog/")
        classpath "org.dom4j:dom4j:2.1.1"
        classpath "jaxen:jaxen:1.1.6"
    }
}

plugins {
    id 'base'
    id 'org.neo4j.doc.build.vale' version '1.0-alpha01'
    id 'org.neo4j.doc.build.saxon' version '1.0-alpha01'
    id 'org.neo4j.doc.build.docbook' version '1.0-alpha15'
}

def traceDocbook = hasProperty('traceDocbook') ? true : false

if (!project.hasProperty("ogmVersion")) { ext.ogmVersion = "3.2.1" }
if (!project.hasProperty("neo4jVersion")) { ext.neo4jVersion = "3.4.6" }
if (!project.hasProperty("kerberosAddonVersion")) { ext.kerberosAddonVersion = "1.0" }
ext {
    traceDocbook = traceDocbook
    resourcesDir = "${projectDir}/src/main/resources"

    ogmDocVersion = ogmVersion.tokenize('.')[0..1].join(".")
    if (ogmVersion.contains("-")) {ogmDocVersion += "-preview"}

    neo4jVersionParts = neo4jVersion.split('-')
    neo4jDocVersion = neo4jVersionParts[0][0..2]
    if (1 < neo4jVersionParts.size()) {
        neo4jDocVersion += "-preview"
    }
    graphAlgoDocVersion = neo4jDocVersion

    copyrightYear = "${new Date().format('yyyy')}"
    docsBaseUri = "https://neo4j.com/docs"
    docsCrossReferenceBaseUris = [
            'operations-manual-base-uri' : "${docsBaseUri}/operations-manual/current",
            'cypher-manual-base-uri'     : "${docsBaseUri}/cypher-manual/current",
            'driver-manual-base-uri'     : "${docsBaseUri}/driver-manual/current",
            'java-reference-base-uri'    : "${docsBaseUri}/java-reference/current",
            'rest-docs-base-uri'         : "${docsBaseUri}/rest-docs/current",
            'ogm-manual-base-uri'        : "${docsBaseUri}/ogm-manual/${ogmDocVersion}",
            'graph-algorithms-base-uri'  : "${docsBaseUri}/graph-algorithms/current",
            'kerberos-add-on-base-uri'   : "${docsBaseUri}/add-on/kerberos/current"
    ]
    docsCrossReferenceBaseUris['neo4j-javadoc-base-uri'] = "${docsCrossReferenceBaseUris['java-reference-base-uri']}/javadocs"
    docsLibraryHeaderConfig =
            """
            Operations_Manual=${docsCrossReferenceBaseUris['operations-manual-base-uri']}/
            Cypher_Manual=${docsCrossReferenceBaseUris['cypher-manual-base-uri']}/
            Driver_Manual=${docsCrossReferenceBaseUris['driver-manual-base-uri']}/
            Docs_Library=${docsBaseUri}/
            """

    commonAsciidoctorAttributes = [
            'copyright-year'                   : copyrightYear,
            'copyright'                        : "${copyrightYear} Neo4j, Inc.",
            'common-license-page-uri'          : "${docsBaseUri}/license/",
            'neo4j-version'                    : neo4jDocVersion,
            'neo4j-version-exact'              : neo4jVersion,
            'kerberos-addon-version'           : kerberosAddonVersion,
            'neo4j-git-version'                : neo4jDocVersion,
            'doctype'                          : 'book',
            'icons'                            : 'font',
            'imagesdir'                        : './images',
            'attribute-missing'                : 'warn',
    ] + docsCrossReferenceBaseUris
    pdfAsciidoctorAttributes = [
            'source-highlighter': 'rouge',
            'pdf-style'         : 'neo',
            'pdf-fontsdir'      : "$projectDir/common/fonts".toString(),
            'doctype'           : 'book',
            'toc'               : '',
            'showlinks'         : '',
            'nonhtmloutput'     : '',
    ]

    docId = 'ogm-manual'
    olinkdb = "${buildDir}/olinkdb/olinkdb.xml"

    runCommand = { strList ->
        assert ( strList instanceof String ||
            ( strList instanceof List && strList.each{ it instanceof String } ) \
    )
        def proc = strList.execute()
        // proc.in.eachLine { line -> println line }
        proc.out.close()
        proc.waitFor()
        // print "[INFO] ( "
        // if(strList instanceof List) {
        //     strList.each { print "${it} " }
        // } else {
        //     print strList
        // }
        // println " )"
        if (proc.exitValue()) {
            println "gave the following error: "
            println "[ERROR] ${proc.getErrorStream()}"
        }
        assert !proc.exitValue()
    }
}

def getAsciidoctor() {
    project.ext.adoc = Asciidoctor.Factory.create()
    project.ext.adoc
}

task toDocbook {
    description 'Build Neo4j Object-Graph Mapping (OGM) Manual Docbook output.'
    ext.sourceDir = "${projectDir}/src/main/asciidoc"
    def sourceFile = new File("${sourceDir}/index.adoc")
    def imagesDir = '../images'
    def docbookOutputDir = "${buildDir}/docbook/${ogmDocVersion}"
    def templateDir = "${resourcesDir}/templates/docbook"
    inputs.dir sourceDir
    outputs.dir docbookOutputDir
    doLast {
        def attrs = project.ext.commonAsciidoctorAttributes + [
            'ogm-doc-version'     : ogmDocVersion,
            'ogm-version'         : ogmVersion,
            'docinfo1'            : '',
        ]
        attrs['imagesdir'] = imagesDir
        attrs['stylesheet'] = 'github.css'
        attrs['stylesdir'] = '../css'
        attrs['linkcss'] = ''
        def opts = OptionsBuilder.options()
                .backend('docbook5')
                .safe(SafeMode.UNSAFE)
                .toDir(new File(docbookOutputDir))
                .templateDir(new File(templateDir))
                .mkDirs(true)
                .attributes(attrs)
        def asciidoctor = getAsciidoctor()
        asciidoctor.convertFile(sourceFile, opts.get())
    }
    finalizedBy {toDocbookCopyResources}
    finalizedBy {preprocess}
}

task toDocbookCopyResources(type: Copy) {
    from(projectDir) {
        include 'images/**'
    }
    from (toDocbook.sourceDir) {
        include "images/**"
    }
    into "${buildDir}/docbook/${ogmDocVersion}"
}

preprocess {
    description 'Fix things in the DocBook XML before further processing.'
    dependsOn toDocbook
    def sourceFile = "${buildDir}/docbook/${ogmDocVersion}/index.xml"
    def toolsDir = "${rootProject.projectDir}/docbook"

    doFirst {
        def cmd = ["${projectDir}/bin/post-process.sh", sourceFile, "${projectDir}/bin/post-process.sed"]
        runCommand(cmd)
    }

    input sourceFile
    outFile sourceFile

    parameters([
        "book-id": "$docId"
    ])
}

html {
    description 'Build Neo4j Object-Graph Mapping (OGM) Manual to multi-page HTML.'
    dependsOn toDocbook
    doFirst { println "[+] Building Neo4j Object-Graph Mapping (OGM) Manual multi-page HTML" }
    def docbookInputDir = "${buildDir}/docbook/${ogmDocVersion}"
    def sourceFile = "${docbookInputDir}/index.xml"
    def outputDir = "${buildDir}/html/${ogmDocVersion}"
    def toolsDir = "${rootProject.projectDir}/docbook"
    def css = [
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css',
        '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.min.css',
        '//fonts.googleapis.com/css?family=Open+Sans:400,300,400italic,600,300italic',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/codemirror.min.css',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/theme/neo.min.css',
        'css/extra.css',
        'css/chunked-base.css'
    ].join(" ")
    def scripts = [
        '//ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js',
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/codemirror.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/addon/runmode/runmode.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/javascript/javascript.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/shell/shell.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/python/python.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/xml/xml.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/clike/clike.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/cypher/cypher.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/properties/properties.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/groovy/groovy.min.js',
        'javascript/colorize.js',
        'javascript/tabs-for-chunked.js',
        'javascript/mutate.min.js',
        'javascript/jquery/treeview/jquery.treeview.min.js',
        'javascript/mp-nav.js',
        'javascript/versionswitcher.js',
        'javascript/version.js',
        '//s3-eu-west-1.amazonaws.com/alpha.neohq.net/docs/new-manual/assets/search.js',
    ].join(" ")

    // Task configuration
    inputs.dir docbookInputDir
    outputs.dir outputDir

    stylesheet "classpath:xsl/custom/xhtml5/chunk.xsl"
    input sourceFile

    // Stylesheet parameters
    parameters ([
            "base.dir": "${outputDir}",
            "chunk.section.depth": "0",
            "html.ext": ".html",
            "make.clean.html": "1",
            "chunker.output.method": "html",
            "chunker.output.encoding": "UTF-8",
            "chunker.output.indent": "yes",
            "use.id.as.dirname": "1",
            "html.stylesheet": "${css}",
            "html.script": "${scripts}",
            "neo.newsearch": "1",
            "generate.toc": "''",
            "header.rule": "0",
            "neo.documentation.library.links": docsLibraryHeaderConfig,
            "target.database.document": "file://${olinkdb}",
            "current.docid": "$docId"
    ])
    finalizedBy { copyHtmlResources }
}

task makeToc(type: XsltTask, dependsOn: {toDocbook}) {
    description 'Create a table of contents.'

    doFirst {
        def sourceFile = "${buildDir}/docbook/${ogmDocVersion}/index.xml"
        def outputFile = "${buildDir}/docbook/${ogmDocVersion}/toc.xml"
        def outputDir = "${buildDir}/docbook/${ogmDocVersion}/_trash"
        def toolsDir = "${rootProject.projectDir}/docbook"

        def url = DocBookPlugin.getClassLoader().getResource("xsl/create-toc/xhtml/maketoc.xsl")
        stylesheet url
        input sourceFile
        outFile outputFile

        sourceSaxParser "org.apache.xml.resolver.tools.ResolvingXMLReader"
        stylesheetSaxParser "org.apache.xml.resolver.tools.ResolvingXMLReader"
        uriResolver "org.apache.xml.resolver.tools.CatalogResolver"

        usingUrls true
        usingClasspathUrls true
        if (hasProperty('traceDocbook')) { verbose true }

        parameters([
            "base.dir": "${outputDir}",
            "chunk.section.depth": "1",
            "chunk.first.sections": "1",
            "use.id.as.dirname": "1",
        ])
    }
}


task sitemap() {
    ext.contentMapXml = file("${projectDir}/docbook/content-map.xml")
    def siteMapDir = "$buildDir/sitemap/$ogmDocVersion"
    outputs.dir siteMapDir

    doLast {
        def siteMap = org.dom4j.DocumentHelper.createDocument()
        def urlset = siteMap.addElement("urlset", "http://www.sitemaps.org/schemas/sitemap/0.9")
        def contentMap = new org.dom4j.io.SAXReader().read(contentMapXml)
        contentMap.selectNodes('//processing-instruction("dbhtml")')
            .collect { pi ->
              pi.getText()                    // filename="installation/index.html"
              .replaceAll("filename=|\"", "") // installation/index.html
        }.each { filename ->
               def url = "${docsBaseUri}/ogm-manual/current" + "/" + filename
               urlset.addElement("url").addElement("loc").addText(url)
        }
        mkdir(siteMapDir)
        new org.dom4j.io.XMLWriter(
            new FileOutputStream(file("$siteMapDir/sitemap.xml")),
            org.dom4j.io.OutputFormat.createPrettyPrint()
        ).write(siteMap)
    }
}

task copyHtmlResources(type: Copy) {
    description 'Copy resources for the multi-page Neo4j Object-Graph Mapping (OGM) Manual'
    inputs.dir "${projectDir}/css"
    inputs.dir "${projectDir}/javascript"
    inputs.dir "${projectDir}/images"
    inputs.dir "${resourcesDir}/css"
    inputs.dir "${resourcesDir}/javascript"
    from ("${toDocbook.sourceDir}") {
        include 'images/**'
    }
    from ("${resourcesDir}") {
        include 'images/**'
        include 'javascript/**'
        include 'css/**'
    }
    from ("${projectDir}/common") {
        include 'logo/**'
        include 'css/jquery.treeview.css'
        include 'css/chunked-base.css'
        include 'javascript/colorize.js'
        include 'javascript/tabs-for-chunked.js'
        include 'javascript/mp-nav.js'
        include 'javascript/mutate.min.js'
        include 'javascript/jquery/treeview/jquery.treeview.min.js'
        include 'javascript/versionswitcher.js'
    }
    into "${buildDir}/html/${ogmDocVersion}"
}

task packageHtml(type: Tar, dependsOn: [html, sitemap]) {
    baseName "ogm-manual"
    version ogmDocVersion
    extension 'tar.gz'
    compression Compression.GZIP
    from {
        "${buildDir}/html/${ogmDocVersion}"
    }
    from { sitemap }
    into {
        "${baseName}/${ogmDocVersion}"
    }
    destinationDir file("$rootProject.buildDir/distributions")
}

task pdf {
    description 'Build Object-Graph Mapping (OGM) Manual PDF.'
    def modelName = 'ogm-manual'
    def sourceDir = "${projectDir}/src/main/asciidoc"
    def sourceFile = new File("${sourceDir}/index.adoc")
    def pdfOutputDir = "${buildDir}/pdf"
    def pdfStylesDir = "${projectDir}/common/pdf-theme"
    inputs.dir sourceDir
    inputs.dir pdfStylesDir
    outputs.dir pdfOutputDir
    doLast {
        def attrs = project.ext.commonAsciidoctorAttributes + project.ext.pdfAsciidoctorAttributes +
                [
                        'manual-title'      : "Neo4j-OGM - An Object Graph Mapping Library for Neo4j: ${ogmDocVersion}",
                        'ogm-doc-version'   : "${ogmDocVersion}",
                        'ogm-version'       : "${ogmVersion}",
                        'pdf-stylesdir'     : pdfStylesDir.toString(),
                        'imagesdir'         : "${sourceDir}/images".toString(),
                        'license-dir'       : "${projectDir}/common/asciidoc",
                ]
        def opts = OptionsBuilder.options()
                .backend('pdf')
                .safe(SafeMode.UNSAFE)
                .toFile(new File("$pdfOutputDir/neo4j-ogm-manual-${ogmDocVersion}.pdf"))
                .mkDirs(true)
                .attributes(attrs)
        getAsciidoctor().convertFile(sourceFile, opts.get())
    }
}
pdf.onlyIf { !project.hasProperty('noPdf') }

task dist(type: Copy, dependsOn: [packageHtml, pdf]) {
    from(buildDir) {
        include 'pdf/**'
    }
    into "$buildDir/distributions"
}

// vim: set fdm=expr:
